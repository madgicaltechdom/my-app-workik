appId: com.madgicaltechdom.storageapp

env:
  VALID_EMAIL: "test@example.com"
  INVALID_EMAIL: "notanemail"
  NONEXISTENT_EMAIL: "nonexistent@example.com"
  EMPTY_EMAIL: ""
  LONG_EMAIL: "verylongemailaddressthatmightcauseissues@reallyreallylongdomainname.com"

flows:
  main:
    # Load Page Object Model
    - runScript: ../../elements/auth.js
    
    # Launch app with clean state
    - launchApp:
        clearState: true
        
    # Navigate to Forgot Password screen
    - assertVisible:
        id: ${output.login.screen}
    - tapOn:
        id: ${output.login.forgotPasswordLink}
    - assertVisible:
        id: ${output.forgotPassword.screen}
        
    # Test Case 1: Verify Forgot Password Screen Elements
    - assertVisible:
        id: ${output.forgotPassword.title}
    - assertVisible:
        text: "Reset Password"
    - assertVisible:
        id: ${output.forgotPassword.emailInput}
    - assertVisible:
        id: ${output.forgotPassword.submitButton}
    - assertVisible:
        id: ${output.forgotPassword.backButton}
        
    # Test Case 2: Verify Initial Form State
    - assertVisible:
        id: ${output.forgotPassword.submitButton}
        enabled: false
        
    # Test Case 3: Empty Email Validation
    - tapOn:
        id: ${output.forgotPassword.submitButton}
    - assertVisible:
        id: ${output.forgotPassword.errorMessage}
    - assertVisible:
        text: "Email is required"
        
    # Test Case 4: Invalid Email Format Validation
    - tapOn:
        id: ${output.forgotPassword.emailInput}
    - inputText: ${INVALID_EMAIL}
    - tapOn:
        id: ${output.forgotPassword.submitButton}
    - assertVisible:
        id: ${output.forgotPassword.errorMessage}
    - assertVisible:
        text: "Please enter a valid email address"
        
    # Test Case 5: Valid Email - Form Enabled
    - tapOn:
        id: ${output.forgotPassword.emailInput}
    - eraseText
    - inputText: ${VALID_EMAIL}
    - assertVisible:
        id: ${output.forgotPassword.submitButton}
        enabled: true
        
    # Test Case 6: Successful Password Reset Request
    - tapOn:
        id: ${output.forgotPassword.submitButton}
    - assertVisible:
        id: ${output.forgotPassword.loadingOverlay}
    - assertVisible:
        id: ${output.forgotPassword.loadingOverlay}
        accessibilityRole: "progressbar"
        accessibilityLabel: "Sending reset email..."
    - waitForAnimationToEnd
    
    # Should show success message or navigate back to login
    - assertVisible:
        id: ${output.login.screen}
        
    # Test Case 7: Error Handling - Nonexistent Email
    - tapOn:
        id: ${output.login.forgotPasswordLink}
    - assertVisible:
        id: ${output.forgotPassword.screen}
    - tapOn:
        id: ${output.forgotPassword.emailInput}
    - inputText: ${NONEXISTENT_EMAIL}
    - tapOn:
        id: ${output.forgotPassword.submitButton}
    - assertVisible:
        id: ${output.forgotPassword.loadingOverlay}
    - waitForAnimationToEnd
    - assertVisible:
        id: ${output.forgotPassword.errorMessage}
    - assertVisible:
        text: "No account found with this email address"
        
    # Test Case 8: Error Message Clearing on Input
    - tapOn:
        id: ${output.forgotPassword.emailInput}
    - inputText: "a"
    - assertNotVisible:
        id: ${output.forgotPassword.errorMessage}
        
    # Test Case 9: Back Button Navigation
    - tapOn:
        id: ${output.forgotPassword.backButton}
    - assertVisible:
        id: ${output.login.screen}
    - assertVisible:
        id: ${output.login.title}
        
    # Test Case 10: Long Email Edge Case
    - tapOn:
        id: ${output.login.forgotPasswordLink}
    - assertVisible:
        id: ${output.forgotPassword.screen}
    - tapOn:
        id: ${output.forgotPassword.emailInput}
    - inputText: ${LONG_EMAIL}
    - tapOn:
        id: ${output.forgotPassword.submitButton}
    - assertVisible:
        id: ${output.forgotPassword.loadingOverlay}
    - waitForAnimationToEnd
        
    # Test Case 11: Accessibility Testing
    - tapOn:
        id: ${output.forgotPassword.backButton}
    - tapOn:
        id: ${output.login.forgotPasswordLink}
    - assertVisible:
        id: ${output.forgotPassword.emailInput}
        accessibilityLabel: "Email input"
        accessibilityRole: "textInput"
    - assertVisible:
        id: ${output.forgotPassword.submitButton}
        accessibilityLabel: "Send reset email"
        accessibilityRole: "button"
    - assertVisible:
        id: ${output.forgotPassword.backButton}
        accessibilityLabel: "Go back to login"
        accessibilityRole: "button"
        
    # Test Case 12: Form State Management
    - tapOn:
        id: ${output.forgotPassword.emailInput}
    - eraseText
    - assertVisible:
        id: ${output.forgotPassword.submitButton}
        enabled: false
    - inputText: ${VALID_EMAIL}
    - assertVisible:
        id: ${output.forgotPassword.submitButton}
        enabled: true
        
    # Test Case 13: Multiple Consecutive Requests
    - tapOn:
        id: ${output.forgotPassword.submitButton}
    - assertVisible:
        id: ${output.forgotPassword.loadingOverlay}
    - waitForAnimationToEnd
    - assertVisible:
        id: ${output.login.screen}
    
    # Navigate back and try again
    - tapOn:
        id: ${output.login.forgotPasswordLink}
    - tapOn:
        id: ${output.forgotPassword.emailInput}
    - inputText: ${VALID_EMAIL}
    - tapOn:
        id: ${output.forgotPassword.submitButton}
    - assertVisible:
        id: ${output.forgotPassword.loadingOverlay}
    - waitForAnimationToEnd
        
    # Test Case 14: Error Message Accessibility
    - tapOn:
        id: ${output.login.forgotPasswordLink}
    - tapOn:
        id: ${output.forgotPassword.emailInput}
    - inputText: ${INVALID_EMAIL}
    - tapOn:
        id: ${output.forgotPassword.submitButton}
    - assertVisible:
        id: ${output.forgotPassword.errorMessage}
        accessibilityRole: "alert"
        accessibilityLiveRegion: "assertive"
        
    # Test Case 15: Network Error Handling
    - tapOn:
        id: ${output.forgotPassword.emailInput}
    - eraseText
    - inputText: "networkerror@example.com"
    - tapOn:
        id: ${output.forgotPassword.submitButton}
    - assertVisible:
        id: ${output.forgotPassword.loadingOverlay}
    - waitForAnimationToEnd
    - assertVisible:
        id: ${output.forgotPassword.errorMessage}
    - assertVisible:
        text: "Network error. Please check your connection and try again."

metadata:
  name: "Forgot Password - Comprehensive Flow"
  description: "Tests forgot password functionality including validation, error handling, success flows, accessibility, form state management, and network error scenarios"
  author: "Test Team"
  tags:
    - auth
    - forgot-password
    - validation
    - error-handling
    - accessibility
    - form-state
    - network-errors
    - user-experience
